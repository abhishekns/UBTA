#region File Header
/*[ Compilation unit ----------------------------------------------------------
    Component       : ubta
    Name            : AbstractExecuterBase.cs
    Last Author     : Abhishek Sharma
    Language        : C#
    Creation Date   : 18. March 2010
    Description     : 

     
-----------------------------------------------------------------------------*/
/*] END */
#endregion
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Xml;
using ubta.Common;

namespace ubta.ExecuterLib
{
    /// <summary>
    /// used with CodeGen
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public abstract class AbstractExecuterBase<T>
    {
        protected VariableManager myVariables = VariableManager.Instance;
        private Dictionary<string, MethodInfo> myMethods = new Dictionary<string, MethodInfo>();

        public void Init()
        {
            InitInternal();
        }

        private T myTarget;

        public T Target
        {
            get
            {
                return myTarget;
            }
            set
            {
                myTarget = value;
            }
        }
        /// <summary>
        /// This method is overridden by child classes and should ideally be generated by CodeGen.
        /// </summary>
        protected abstract void InitInternal();

        /// <summary>
        /// This method is overridden by child classes and should ideally be generated by CodeGen.
        /// </summary>
        /// <param name="anode_in">The method node</param>
        public abstract void ExecuteMethod(XmlNode anode_in);

        protected int GetOverloadIndex(XmlNode anode_in)
        {
            int idx = 0;
            foreach (XmlNode c in anode_in.ChildNodes)
            {
                if ((idx = c.Name.LastIndexOf('_')) != -1)
                {
                    idx = Convert.ToInt32(c.Name[idx + 1]);
                    break;
                }
            }
            return idx;
        }

        /// <summary>
        /// Gets the value of the attribute.
        /// </summary>
        /// <param name="aNode_in">the node.</param>
        /// <param name="attName"></param>
        /// <returns>the attribute value</returns>
        protected string GetAttVal(XmlNode aNode_in, string attName)
        {
            string name = string.Empty;
            if (null != aNode_in.Attributes)
            {
                XmlAttribute att = aNode_in.Attributes[attName];
                if (null != att)
                {
                    name = att.Value;
                }
            }
            return name;
        }

    }
}